{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ffmpeg","createFFmpeg","log","App","useState","ready","setReady","video","setVideo","gif","setGif","load","a","useEffect","convertToGif","fetchFile","FS","run","data","url","URL","createObjectURL","Blob","buffer","type","className","controls","src","width","onClick","onChange","e","target","files","item","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAIMA,EAASC,uBAAa,CAAEC,KAAK,IA8EpBC,MA5Ef,WAAgB,IAAD,EACaC,oBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEaF,qBAFb,mBAENG,EAFM,KAECC,EAFD,OAGSJ,qBAHT,mBAGNK,EAHM,KAGDC,EAHC,KAKPC,EAAI,uCAAG,sBAAAC,EAAA,sEACLZ,EAAOW,OADF,OAEXL,GAAS,GAFE,2CAAH,qDAKVO,qBAAU,WACRF,MACC,IAEH,IAAMG,EAAY,uCAAG,8BAAAF,EAAA,kEAEnBZ,EAFmB,SAEsBe,oBAAUR,GAFhC,+BAEZS,GAFY,UAET,YAAa,WAFJ,eAKbhB,EAAOiB,IACX,KACA,WACA,KACA,OACA,MACA,MACA,KACA,MACA,WAdiB,OAkBbC,EAAOlB,EAAOgB,GAAG,WAAY,WAG7BG,EAAMC,IAAIC,gBACd,IAAIC,KAAK,CAACJ,EAAKK,QAAS,CAAEC,KAAM,eAElCd,EAAOS,GAxBY,4CAAH,qDA2BlB,OAAOd,EACL,sBAAKoB,UAAU,MAAf,UACE,2CACClB,GACC,qCACE,uBAAOmB,UAAQ,EAACC,IAAKP,IAAIC,gBAAgBd,GAAQqB,MAAM,QACvD,uBACA,uBACA,wBAAQC,QAASf,EAAjB,2BACA,uBACA,uBACA,0BAGJ,8BACE,uBACEU,KAAK,OACLM,SAAU,SAACC,GAAD,aAAOvB,EAAQ,UAACuB,EAAEC,OAAOC,aAAV,aAAC,EAAgBC,KAAK,SAIlDzB,GACC,qCACE,2CACA,qBAAKkB,IAAKlB,EAAKmB,MAAM,MAAMO,IAAI,cAKrC,qBAAKV,UAAU,MAAf,SACE,+CCjESW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d83f268f.chunk.js","sourcesContent":["import './App.css';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport { useEffect, useState } from 'react';\n\nconst ffmpeg = createFFmpeg({ log: true });\n\nfunction App() {\n  const [ready, setReady] = useState(false);\n  const [video, setVideo] = useState();\n  const [gif, setGif] = useState();\n\n  const load = async () => {\n    await ffmpeg.load();\n    setReady(true);\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const convertToGif = async () => {\n    // Write the file to memory\n    ffmpeg.FS('writeFile', 'test.mp4', await fetchFile(video));\n\n    // Run the FFMpeg command\n    await ffmpeg.run(\n      '-i',\n      'test.mp4',\n      '-t',\n      '13.5',\n      '-ss',\n      '0.0',\n      '-f',\n      'gif',\n      'out.gif'\n    );\n\n    // Read the result\n    const data = ffmpeg.FS('readFile', 'out.gif');\n\n    // Create a URL\n    const url = URL.createObjectURL(\n      new Blob([data.buffer], { type: 'image/gif' })\n    );\n    setGif(url);\n  };\n\n  return ready ? (\n    <div className='App'>\n      <h1>Gif Maker</h1>\n      {video && (\n        <>\n          <video controls src={URL.createObjectURL(video)} width='250'></video>\n          <br />\n          <br />\n          <button onClick={convertToGif}>Covert to GIF</button>\n          <br />\n          <br />\n          <br />\n        </>\n      )}\n      <div>\n        <input\n          type='file'\n          onChange={(e) => setVideo(e.target.files?.item(0))}\n        />\n      </div>\n\n      {gif && (\n        <>\n          <h1>Gif Image</h1>\n          <img src={gif} width='250' alt='gif' />\n        </>\n      )}\n    </div>\n  ) : (\n    <div className='App'>\n      <h1>Loading...</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}